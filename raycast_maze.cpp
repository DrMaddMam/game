// Compile with:
// g++ -std=c++17 -O3 -Wall raycast_maze.cpp -o raycast_maze $(sdl2-config --cflags --libs)
#pragma region WALLBMP
unsigned char wall_bmp[] = {
    0x42, 0x4d, 0x36, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x04,
    0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00,
    0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0xa8, 0xa8, 0x00, 0x00, 0x00, 0x00,
    0xa8, 0x00, 0xa8, 0x00, 0xa8, 0x00, 0x00, 0x54, 0xa8, 0x00, 0xa8, 0xa8,
    0xa8, 0x00, 0x54, 0x54, 0x54, 0x00, 0xfc, 0x54, 0x54, 0x00, 0x54, 0xfc,
    0x54, 0x00, 0xfc, 0xfc, 0x54, 0x00, 0x54, 0x54, 0xfc, 0x00, 0xfc, 0x54,
    0xfc, 0x00, 0x54, 0xfc, 0xfc, 0x00, 0xfc, 0xfc, 0xfc, 0x00, 0xec, 0xec,
    0xec, 0x00, 0xdc, 0xdc, 0xdc, 0x00, 0xd0, 0xd0, 0xd0, 0x00, 0xc0, 0xc0,
    0xc0, 0x00, 0xb4, 0xb4, 0xb4, 0x00, 0xa8, 0xa8, 0xa8, 0x00, 0x98, 0x98,
    0x98, 0x00, 0x8c, 0x8c, 0x8c, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x70, 0x70,
    0x70, 0x00, 0x64, 0x64, 0x64, 0x00, 0x54, 0x54, 0x54, 0x00, 0x48, 0x48,
    0x48, 0x00, 0x38, 0x38, 0x38, 0x00, 0x2c, 0x2c, 0x2c, 0x00, 0x20, 0x20,
    0x20, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00,
    0xe0, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00,
    0xbc, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00,
    0x98, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00,
    0x70, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00,
    0x4c, 0x00, 0x00, 0x00, 0x40, 0x00, 0xd8, 0xd8, 0xfc, 0x00, 0xb8, 0xb8,
    0xfc, 0x00, 0x9c, 0x9c, 0xfc, 0x00, 0x7c, 0x7c, 0xfc, 0x00, 0x5c, 0x5c,
    0xfc, 0x00, 0x40, 0x40, 0xfc, 0x00, 0x20, 0x20, 0xfc, 0x00, 0x00, 0x00,
    0xfc, 0x00, 0x5c, 0xa8, 0xfc, 0x00, 0x40, 0x98, 0xfc, 0x00, 0x20, 0x88,
    0xfc, 0x00, 0x00, 0x78, 0xfc, 0x00, 0x00, 0x6c, 0xe4, 0x00, 0x00, 0x60,
    0xcc, 0x00, 0x00, 0x54, 0xb4, 0x00, 0x00, 0x4c, 0x9c, 0x00, 0xd8, 0xfc,
    0xfc, 0x00, 0xb8, 0xfc, 0xfc, 0x00, 0x9c, 0xfc, 0xfc, 0x00, 0x7c, 0xfc,
    0xfc, 0x00, 0x5c, 0xf8, 0xfc, 0x00, 0x40, 0xf4, 0xfc, 0x00, 0x20, 0xf4,
    0xfc, 0x00, 0x00, 0xf4, 0xfc, 0x00, 0x00, 0xd8, 0xe4, 0x00, 0x00, 0xc4,
    0xcc, 0x00, 0x00, 0xac, 0xb4, 0x00, 0x00, 0x9c, 0x9c, 0x00, 0x00, 0x84,
    0x84, 0x00, 0x00, 0x6c, 0x70, 0x00, 0x00, 0x54, 0x58, 0x00, 0x00, 0x40,
    0x40, 0x00, 0x5c, 0xfc, 0xd0, 0x00, 0x40, 0xfc, 0xc4, 0x00, 0x20, 0xfc,
    0xb4, 0x00, 0x00, 0xfc, 0xa0, 0x00, 0x00, 0xe4, 0x90, 0x00, 0x00, 0xcc,
    0x80, 0x00, 0x00, 0xb4, 0x74, 0x00, 0x00, 0x9c, 0x60, 0x00, 0xd8, 0xfc,
    0xd8, 0x00, 0xb8, 0xfc, 0xbc, 0x00, 0x9c, 0xfc, 0x9c, 0x00, 0x7c, 0xfc,
    0x80, 0x00, 0x5c, 0xfc, 0x60, 0x00, 0x40, 0xfc, 0x40, 0x00, 0x20, 0xfc,
    0x20, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xec,
    0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0xc8,
    0x04, 0x00, 0x00, 0xbc, 0x04, 0x00, 0x00, 0xb0, 0x04, 0x00, 0x00, 0xa4,
    0x04, 0x00, 0x00, 0x98, 0x04, 0x00, 0x00, 0x88, 0x04, 0x00, 0x00, 0x7c,
    0x04, 0x00, 0x00, 0x70, 0x04, 0x00, 0x00, 0x64, 0x04, 0x00, 0x00, 0x58,
    0x04, 0x00, 0x00, 0x4c, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0xfc, 0xfc,
    0xd8, 0x00, 0xfc, 0xfc, 0xb8, 0x00, 0xfc, 0xfc, 0x9c, 0x00, 0xf8, 0xfc,
    0x7c, 0x00, 0xfc, 0xfc, 0x5c, 0x00, 0xfc, 0xfc, 0x40, 0x00, 0xfc, 0xfc,
    0x20, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0xe4, 0xe4, 0x00, 0x00, 0xcc, 0xcc,
    0x00, 0x00, 0xb4, 0xb4, 0x00, 0x00, 0x9c, 0x9c, 0x00, 0x00, 0x84, 0x84,
    0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x58, 0x58, 0x00, 0x00, 0x40, 0x40,
    0x00, 0x00, 0xfc, 0xbc, 0x5c, 0x00, 0xfc, 0xb0, 0x40, 0x00, 0xfc, 0xa8,
    0x20, 0x00, 0xfc, 0x9c, 0x00, 0x00, 0xe4, 0x8c, 0x00, 0x00, 0xcc, 0x7c,
    0x00, 0x00, 0xb4, 0x6c, 0x00, 0x00, 0x9c, 0x5c, 0x00, 0x00, 0xfc, 0xd8,
    0xd8, 0x00, 0xfc, 0xbc, 0xb8, 0x00, 0xfc, 0x9c, 0x9c, 0x00, 0xfc, 0x80,
    0x7c, 0x00, 0xfc, 0x60, 0x5c, 0x00, 0xfc, 0x40, 0x40, 0x00, 0xfc, 0x24,
    0x20, 0x00, 0xfc, 0x04, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xec, 0x00,
    0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0xc8, 0x00,
    0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0xa4, 0x00,
    0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x7c, 0x00,
    0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x58, 0x00,
    0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x28, 0x28,
    0x28, 0x00, 0x34, 0xe0, 0xfc, 0x00, 0x24, 0xd4, 0xfc, 0x00, 0x18, 0xcc,
    0xfc, 0x00, 0x08, 0xc0, 0xfc, 0x00, 0x00, 0xb4, 0xfc, 0x00, 0xfc, 0x20,
    0xb4, 0x00, 0xfc, 0x00, 0xa8, 0x00, 0xe4, 0x00, 0x98, 0x00, 0xcc, 0x00,
    0x80, 0x00, 0xb4, 0x00, 0x74, 0x00, 0x9c, 0x00, 0x60, 0x00, 0x84, 0x00,
    0x50, 0x00, 0x70, 0x00, 0x44, 0x00, 0x58, 0x00, 0x34, 0x00, 0x40, 0x00,
    0x28, 0x00, 0xfc, 0xd8, 0xfc, 0x00, 0xfc, 0xb8, 0xfc, 0x00, 0xfc, 0x9c,
    0xfc, 0x00, 0xfc, 0x7c, 0xfc, 0x00, 0xfc, 0x5c, 0xfc, 0x00, 0xfc, 0x40,
    0xfc, 0x00, 0xfc, 0x20, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0xe4, 0x00,
    0xe0, 0x00, 0xcc, 0x00, 0xc8, 0x00, 0xb4, 0x00, 0xb4, 0x00, 0x9c, 0x00,
    0x9c, 0x00, 0x84, 0x00, 0x84, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x58, 0x00,
    0x58, 0x00, 0x40, 0x00, 0x40, 0x00, 0xdc, 0xe8, 0xfc, 0x00, 0xd0, 0xe0,
    0xfc, 0x00, 0xc4, 0xd8, 0xfc, 0x00, 0xbc, 0xd4, 0xfc, 0x00, 0xb0, 0xcc,
    0xfc, 0x00, 0xa4, 0xc4, 0xfc, 0x00, 0x9c, 0xbc, 0xfc, 0x00, 0x90, 0xb8,
    0xfc, 0x00, 0x80, 0xb0, 0xfc, 0x00, 0x70, 0xa4, 0xfc, 0x00, 0x60, 0x9c,
    0xfc, 0x00, 0x5c, 0x94, 0xf0, 0x00, 0x58, 0x8c, 0xe8, 0x00, 0x54, 0x88,
    0xdc, 0x00, 0x50, 0x80, 0xd0, 0x00, 0x4c, 0x7c, 0xc8, 0x00, 0x48, 0x78,
    0xbc, 0x00, 0x44, 0x70, 0xb4, 0x00, 0x40, 0x68, 0xa8, 0x00, 0x3c, 0x64,
    0xa0, 0x00, 0x38, 0x60, 0x9c, 0x00, 0x34, 0x5c, 0x90, 0x00, 0x30, 0x58,
    0x88, 0x00, 0x2c, 0x50, 0x80, 0x00, 0x28, 0x4c, 0x74, 0x00, 0x24, 0x48,
    0x6c, 0x00, 0x20, 0x40, 0x5c, 0x00, 0x1c, 0x3c, 0x54, 0x00, 0x18, 0x38,
    0x48, 0x00, 0x18, 0x30, 0x40, 0x00, 0x14, 0x2c, 0x38, 0x00, 0x0c, 0x20,
    0x28, 0x00, 0x64, 0x00, 0x60, 0x00, 0x64, 0x64, 0x00, 0x00, 0x60, 0x60,
    0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x10, 0x24,
    0x30, 0x00, 0x48, 0x00, 0x48, 0x00, 0x50, 0x00, 0x50, 0x00, 0x34, 0x00,
    0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x4c, 0x4c, 0x4c, 0x00, 0x5c, 0x5c,
    0x5c, 0x00, 0x40, 0x40, 0x40, 0x00, 0x30, 0x30, 0x30, 0x00, 0x34, 0x34,
    0x34, 0x00, 0xf4, 0xf4, 0xd8, 0x00, 0xe8, 0xe8, 0xb8, 0x00, 0xdc, 0xdc,
    0x9c, 0x00, 0xc8, 0xc8, 0x74, 0x00, 0xc0, 0xc0, 0x48, 0x00, 0xb4, 0xb4,
    0x20, 0x00, 0xb0, 0xb0, 0x20, 0x00, 0xa4, 0xa4, 0x00, 0x00, 0x98, 0x98,
    0x00, 0x00, 0x8c, 0x8c, 0x00, 0x00, 0x84, 0x84, 0x00, 0x00, 0x7c, 0x7c,
    0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x74, 0x74, 0x00, 0x00, 0x70, 0x70,
    0x00, 0x00, 0x6c, 0x6c, 0x00, 0x00, 0x88, 0x00, 0x98, 0x00, 0xed, 0xed,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xed, 0x17, 0x18, 0x17, 0x17, 0x1a, 0x00, 0xed, 0xed, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xa0,
    0xa0, 0xa0, 0xed, 0xa0, 0xa0, 0xa0, 0xed, 0xa0, 0xa0, 0xa0, 0xed, 0xec,
    0xec, 0x08, 0x1a, 0x00, 0x00, 0x1a, 0xa0, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9,
    0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9,
    0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0x00, 0xed, 0x07, 0x17, 0x16, 0x16, 0x17,
    0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
    0xed, 0xed, 0xed, 0xed, 0xec, 0xec, 0xec, 0xed, 0xec, 0xec, 0xec, 0xed,
    0xec, 0xec, 0xec, 0x08, 0x08, 0x1a, 0x16, 0x00, 0x00, 0x17, 0x08, 0xec,
    0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec,
    0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0x1d, 0xa0, 0x00, 0xed, 0x13,
    0x16, 0x16, 0x16, 0x16, 0x00, 0xe9, 0xe9, 0xa0, 0xed, 0xec, 0xec, 0xec,
    0xec, 0xec, 0xec, 0xec, 0x08, 0x08, 0x1a, 0x1a, 0x1a, 0x17, 0x08, 0x1a,
    0x1a, 0x17, 0x1a, 0x1a, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x16, 0x07, 0x00,
    0x00, 0x17, 0x16, 0x18, 0x19, 0x08, 0x19, 0x18, 0x18, 0x17, 0x19, 0x1a,
    0x19, 0x1a, 0x1a, 0x1a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x1a,
    0xa0, 0x00, 0xed, 0x12, 0x17, 0x17, 0x13, 0x13, 0x00, 0xa0, 0xa0, 0xed,
    0x08, 0x1a, 0x17, 0x1a, 0x17, 0x17, 0x1a, 0x17, 0x1a, 0x1a, 0x18, 0x18,
    0x18, 0x18, 0x1a, 0x18, 0x17, 0x18, 0x08, 0x17, 0x17, 0x18, 0x1a, 0x1a,
    0x1a, 0x13, 0x07, 0xed, 0x00, 0x16, 0x16, 0x17, 0x17, 0x17, 0x19, 0x1a,
    0x19, 0x18, 0x19, 0x19, 0x1a, 0x08, 0x18, 0x1a, 0x1a, 0x19, 0x18, 0x18,
    0x18, 0x17, 0x17, 0x19, 0xec, 0x00, 0xed, 0x13, 0x16, 0x16, 0x13, 0x14,
    0x00, 0xa0, 0xa0, 0x08, 0x18, 0x1a, 0x08, 0x17, 0x17, 0x08, 0x18, 0x1a,
    0x17, 0x1a, 0x18, 0x08, 0x18, 0x08, 0x17, 0x08, 0x18, 0x08, 0x1a, 0x17,
    0x18, 0x08, 0x1a, 0x17, 0x1a, 0x13, 0x13, 0x08, 0x00, 0x16, 0x07, 0x18,
    0x19, 0x1a, 0x19, 0x18, 0x1a, 0x19, 0x18, 0x18, 0x18, 0x19, 0x17, 0x18,
    0x19, 0x18, 0x17, 0x16, 0x13, 0x12, 0x13, 0x07, 0x1a, 0x00, 0xed, 0x16,
    0x13, 0x13, 0x16, 0x1a, 0x00, 0xed, 0xec, 0x18, 0x1a, 0x18, 0x17, 0x08,
    0x1a, 0x17, 0x17, 0x1a, 0x17, 0x1a, 0x08, 0x18, 0x17, 0x1a, 0x18, 0x18,
    0x17, 0x1a, 0x17, 0x08, 0x17, 0x08, 0x18, 0x1a, 0x17, 0x16, 0x13, 0x1a,
    0x00, 0x16, 0x07, 0x17, 0x17, 0x16, 0x18, 0x17, 0x13, 0x12, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x07, 0x16, 0x17, 0x17, 0x17,
    0x1a, 0xed, 0xed, 0x17, 0x13, 0x13, 0x17, 0x08, 0xed, 0x08, 0x08, 0x1a,
    0x17, 0x17, 0x1a, 0x18, 0x17, 0x18, 0x18, 0x1a, 0x1a, 0x17, 0x08, 0x1a,
    0x1a, 0x18, 0x1a, 0x08, 0x1a, 0x18, 0x08, 0x1a, 0x1a, 0x18, 0x1a, 0x17,
    0x1a, 0x16, 0x13, 0x1a, 0x00, 0x16, 0x07, 0x18, 0x18, 0x07, 0x13, 0x12,
    0x14, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x19, 0x1a, 0x1a, 0x08, 0x1c,
    0x1d, 0xec, 0x1d, 0xed, 0xed, 0xed, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x17, 0x17, 0x18, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x17,
    0x1a, 0x1a, 0x17, 0x17, 0x17, 0x1a, 0x17, 0x17, 0x17, 0x1a, 0x17, 0x17,
    0x17, 0x1a, 0x17, 0x1a, 0x17, 0x16, 0x13, 0x1a, 0x00, 0x17, 0x14, 0x13,
    0x13, 0x13, 0x07, 0x17, 0x19, 0x08, 0x1d, 0xa0, 0xec, 0xed, 0xed, 0xed,
    0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0xed, 0x17,
    0xed, 0xe9, 0xe9, 0x00, 0x00, 0x1a, 0x1a, 0x13, 0x16, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x13, 0x13, 0x1a,
    0x00, 0x1a, 0x17, 0x17, 0x17, 0x19, 0x1c, 0xa0, 0xa0, 0x1f, 0x1f, 0xed,
    0xed, 0xed, 0xed, 0xed, 0x1a, 0x17, 0x17, 0x1a, 0x1a, 0x08, 0x1c, 0x1d,
    0x00, 0x00, 0xed, 0x16, 0x17, 0xed, 0xed, 0xe9, 0x00, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x17, 0x16,
    0x07, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x1a, 0x00, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x07, 0x13, 0x17,
    0x18, 0x18, 0x19, 0x1c, 0xa0, 0x00, 0xed, 0x16, 0x16, 0xec, 0xed, 0xed,
    0xe9, 0x00, 0x00, 0xed, 0xed, 0x00, 0x00, 0x00, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xec, 0x08, 0x08, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x08, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0x14, 0x17, 0x1a, 0x1a, 0x1a, 0x08, 0x08, 0x08, 0x00,
    0x1a, 0x14, 0x13, 0x18, 0x19, 0x17, 0x18, 0x1c, 0xa0, 0x00, 0xed, 0x16,
    0x16, 0x18, 0xec, 0xed, 0xed, 0x00, 0x00, 0x00, 0x19, 0x1a, 0x1d, 0x00,
    0xed, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xed, 0xed, 0xed, 0xed, 0x12, 0x13, 0x16, 0x16, 0x16,
    0x16, 0x17, 0x19, 0xed, 0x19, 0x13, 0x12, 0x17, 0x18, 0x17, 0x19, 0xec,
    0xa0, 0x00, 0xed, 0x16, 0x07, 0x18, 0x1a, 0xec, 0xed, 0xe9, 0x00, 0x00,
    0x16, 0x1a, 0x1a, 0x00, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0x1a, 0x16, 0x13, 0x16,
    0x17, 0x19, 0x18, 0x08, 0x1d, 0x00, 0xed, 0x16, 0x07, 0x1a, 0x18, 0xec,
    0xed, 0xe9, 0x00, 0x00, 0x14, 0x07, 0x1a, 0xed, 0xed, 0xec, 0xec, 0xec,
    0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xec, 0xa0, 0xa0, 0xed,
    0x00, 0x00, 0x07, 0x19, 0x1d, 0xed, 0xe9, 0xe9, 0x00, 0xe9, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1c, 0x17, 0x13, 0x07, 0x18, 0x18, 0x1a, 0x08, 0x00, 0xed, 0x16,
    0x07, 0x17, 0x1a, 0x08, 0xec, 0xed, 0x00, 0x00, 0xed, 0xed, 0xed, 0xed,
    0xec, 0x18, 0x17, 0x1a, 0x17, 0x17, 0x18, 0x18, 0x08, 0x17, 0x08, 0x08,
    0x08, 0xec, 0xec, 0xa0, 0x00, 0x00, 0x13, 0x07, 0x08, 0xec, 0x1d, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0x1f, 0x1f, 0xe9, 0xe9, 0x00,
    0xe9, 0x00, 0x00, 0x00, 0x00, 0xed, 0x08, 0x07, 0x07, 0x16, 0x17, 0x18,
    0x1a, 0xed, 0xed, 0x16, 0x07, 0x1a, 0x18, 0x1a, 0x1a, 0xed, 0xe9, 0x00,
    0x00, 0xed, 0xed, 0xec, 0x16, 0x18, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x17,
    0x18, 0x1a, 0x18, 0x17, 0x1a, 0x17, 0x1a, 0xec, 0x00, 0x00, 0x13, 0x13,
    0x17, 0x19, 0x1a, 0x08, 0xec, 0xec, 0xec, 0x1d, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xa0, 0xa0, 0xe9, 0xe9, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xed, 0xed, 0xed, 0x16, 0x07, 0x17, 0x1a, 0x1a,
    0x1a, 0xed, 0xe9, 0x00, 0x00, 0x00, 0xed, 0x13, 0x16, 0x17, 0x17, 0x1a,
    0x1a, 0x17, 0x18, 0x1a, 0x17, 0x1a, 0x17, 0x08, 0x1a, 0x17, 0x18, 0x1a,
    0x00, 0x00, 0x13, 0x13, 0x19, 0x17, 0x19, 0x17, 0x18, 0x1a, 0x1a, 0x19,
    0x19, 0x1a, 0x1a, 0x18, 0x1a, 0x1c, 0x08, 0xec, 0xec, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xa0, 0x1f, 0xa0, 0xa0, 0x00, 0x00, 0x00, 0xed, 0x16,
    0x07, 0x1a, 0x1a, 0x17, 0x17, 0xed, 0xa0, 0xe9, 0x00, 0x00, 0x00, 0x16,
    0x13, 0x13, 0x07, 0x16, 0x18, 0x1a, 0x18, 0x08, 0x17, 0x1a, 0x08, 0x08,
    0x1a, 0x17, 0x08, 0x1a, 0xed, 0x00, 0x13, 0x13, 0x19, 0x19, 0x17, 0x19,
    0x1a, 0x18, 0x17, 0x19, 0x1a, 0x19, 0x17, 0x19, 0x1a, 0x18, 0x18, 0x18,
    0x1a, 0x19, 0x18, 0x18, 0x19, 0x08, 0x1c, 0x08, 0x08, 0x1c, 0xa0, 0x1f,
    0xe9, 0x00, 0xed, 0x16, 0x07, 0x1a, 0x08, 0x1a, 0x1a, 0xec, 0xed, 0xa0,
    0xe9, 0x00, 0x00, 0x1a, 0x16, 0x13, 0x13, 0x13, 0x07, 0x17, 0x18, 0x18,
    0x17, 0x1a, 0x1a, 0x18, 0x1a, 0x18, 0x18, 0x1a, 0xed, 0x00, 0x13, 0x13,
    0x19, 0x08, 0x1a, 0x19, 0x17, 0x18, 0x1a, 0x1a, 0x1a, 0x08, 0x1a, 0x19,
    0x17, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x17, 0x19, 0x19, 0x19, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1c, 0xed, 0x1f, 0x00, 0xed, 0x16, 0x07, 0x17, 0x1a, 0x17,
    0x18, 0x1a, 0xec, 0xed, 0xed, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x18, 0x13,
    0x13, 0x07, 0x07, 0x17, 0x1a, 0x18, 0x17, 0x17, 0x1a, 0x18, 0x08, 0x08,
    0xa0, 0x00, 0x13, 0x13, 0x17, 0x1a, 0x1a, 0x1a, 0x17, 0x18, 0x1a, 0x19,
    0x19, 0x08, 0x1a, 0x17, 0x19, 0x18, 0x17, 0x17, 0x18, 0x19, 0x17, 0x1a,
    0x1a, 0x18, 0x18, 0x17, 0x17, 0x18, 0x19, 0xec, 0x1f, 0x00, 0xed, 0x16,
    0x07, 0x1a, 0x17, 0x1a, 0x18, 0x1a, 0x1a, 0x08, 0xec, 0xed, 0xa0, 0xe9,
    0x00, 0x00, 0xed, 0x18, 0x13, 0x13, 0x07, 0x17, 0x1a, 0x08, 0x1a, 0x18,
    0x18, 0x1a, 0x17, 0x17, 0xed, 0x00, 0x13, 0x13, 0x17, 0x19, 0x1a, 0x1a,
    0x19, 0x17, 0x18, 0x1a, 0x19, 0x19, 0x19, 0x17, 0x18, 0x17, 0x1a, 0x17,
    0x18, 0x17, 0x19, 0x18, 0x18, 0x17, 0x16, 0x18, 0x1a, 0x17, 0x1a, 0x19,
    0xec, 0x00, 0xed, 0x16, 0x07, 0x08, 0x1a, 0x18, 0x18, 0x1a, 0x18, 0x18,
    0x18, 0xec, 0xed, 0xa0, 0x00, 0x00, 0xed, 0xed, 0x18, 0x18, 0x13, 0x07,
    0x17, 0x17, 0x18, 0x17, 0x08, 0x1a, 0x1a, 0x17, 0xed, 0xed, 0x13, 0x13,
    0x16, 0x19, 0x1a, 0x1a, 0x19, 0x19, 0x18, 0x17, 0x1a, 0x19, 0x17, 0x1a,
    0x08, 0x1a, 0x17, 0x1a, 0x08, 0x1a, 0x17, 0x19, 0x1a, 0x17, 0x17, 0x18,
    0x17, 0x18, 0x17, 0x1a, 0x08, 0x00, 0xed, 0x16, 0x07, 0x17, 0x17, 0x1a,
    0x1a, 0x17, 0x1a, 0x18, 0x18, 0x1a, 0xed, 0xa0, 0x00, 0x00, 0xed, 0xed,
    0xed, 0xed, 0x18, 0x13, 0x13, 0x07, 0x17, 0x17, 0x17, 0x1a, 0x08, 0x08,
    0xed, 0xed, 0x13, 0x12, 0x19, 0x1a, 0x17, 0x19, 0x1a, 0x1a, 0x1a, 0x18,
    0x17, 0x1a, 0x1a, 0x19, 0x17, 0x17, 0x1a, 0x1a, 0x17, 0x17, 0x19, 0x1a,
    0x18, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x08, 0x00, 0xed, 0x16,
    0x07, 0x1a, 0x1a, 0x17, 0x18, 0x08, 0x1a, 0x1a, 0x1a, 0x18, 0xed, 0xed,
    0x00, 0x00, 0xed, 0xed, 0xed, 0xed, 0xed, 0x18, 0x13, 0x13, 0x13, 0x13,
    0x07, 0x17, 0x08, 0xed, 0xed, 0xed, 0x13, 0x13, 0x13, 0x16, 0x1a, 0x17,
    0x19, 0x17, 0x07, 0x07, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x16, 0x17,
    0x1a, 0x00, 0xed, 0x16, 0x07, 0x1a, 0x17, 0x1a, 0x1a, 0x1a, 0x17, 0x1a,
    0x17, 0x1a, 0xed, 0xed, 0x00, 0x00, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0x17, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x07, 0x07, 0x16, 0x17, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0xed, 0x16, 0x07, 0x17, 0x1a, 0x17,
    0x18, 0x08, 0x1a, 0x1a, 0x1a, 0x1a, 0xed, 0xed, 0x00, 0x00, 0xed, 0xed,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x08, 0x17, 0x13, 0x13, 0x13, 0x14, 0x16, 0x19, 0x1a, 0x1a,
    0x1c, 0x1d, 0x1c, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0x16,
    0x07, 0x1a, 0x17, 0x08, 0x08, 0x1a, 0x1a, 0x17, 0x1a, 0x08, 0xed, 0xed,
    0x00, 0x00, 0xed, 0xec, 0xed, 0xed, 0xa0, 0x1f, 0xe9, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x16, 0x07, 0x1a, 0x1a, 0x1a, 0x1a, 0x18, 0x1a, 0x1a,
    0x1a, 0x17, 0xed, 0xed, 0x00, 0x00, 0xed, 0x1a, 0x08, 0x08, 0xec, 0x1d,
    0xec, 0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xec, 0x00, 0xed,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x07, 0x17, 0x1a, 0x17,
    0x1a, 0x1a, 0x08, 0x08, 0x1a, 0x1a, 0xed, 0xed, 0x00, 0x00, 0xec, 0x18,
    0x18, 0x17, 0x18, 0x1a, 0x1c, 0x08, 0x18, 0x18, 0x17, 0x18, 0x17, 0x16,
    0x16, 0x08, 0x00, 0xed, 0x08, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xe9, 0x00, 0x16,
    0x07, 0x17, 0x17, 0x1a, 0x17, 0x1a, 0x08, 0x08, 0x18, 0x1a, 0xed, 0xed,
    0x00, 0x00, 0xec, 0x17, 0x19, 0x1a, 0x1a, 0x19, 0x19, 0x1a, 0x17, 0x17,
    0x17, 0x1a, 0x1a, 0x17, 0x16, 0x19, 0x00, 0xed, 0x16, 0x19, 0x1a, 0x19,
    0x1a, 0x18, 0x17, 0x17, 0x18, 0x1a, 0x08, 0x1a, 0x18, 0x17, 0x1a, 0x1a,
    0x16, 0x16, 0x19, 0x1a, 0x17, 0x16, 0x1a, 0x19, 0x17, 0x1a, 0x17, 0x17,
    0x17, 0x19, 0x00, 0x16, 0x07, 0x18, 0x18, 0x17, 0x08, 0x1a, 0x18, 0x1a,
    0x1a, 0x1a, 0xed, 0xed, 0x00, 0x00, 0x1a, 0x16, 0x1a, 0x19, 0x19, 0x1a,
    0x1a, 0x19, 0x17, 0x18, 0x17, 0x17, 0x19, 0x18, 0x19, 0x19, 0x00, 0xed,
    0x16, 0x16, 0x17, 0x1a, 0x18, 0x18, 0x17, 0x18, 0x1a, 0x18, 0x18, 0x19,
    0x1a, 0x18, 0x17, 0x17, 0x19, 0x19, 0x17, 0x17, 0x18, 0x1a, 0x17, 0x16,
    0x1a, 0x1a, 0x1a, 0x17, 0x1a, 0x17, 0x00, 0x16, 0x07, 0x1a, 0x17, 0x18,
    0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x17, 0xed, 0xed, 0x00, 0x00, 0x18, 0x17,
    0x18, 0x19, 0x17, 0x18, 0x19, 0x17, 0x18, 0x17, 0x17, 0x1a, 0x18, 0x17,
    0x17, 0x1a, 0x00, 0xed, 0x12, 0x07, 0x18, 0x17, 0x17, 0x17, 0x17, 0x17,
    0x17, 0x17, 0x18, 0x17, 0x1a, 0x1a, 0x1a, 0x1a, 0x16, 0x18, 0x1a, 0x1a,
    0x17, 0x16, 0x18, 0x19, 0x17, 0x1a, 0x17, 0x17, 0x1a, 0x1a, 0x00, 0x16,
    0x07, 0x17, 0x18, 0x1a, 0x17, 0x1a, 0x1a, 0x1a, 0x18, 0x1a, 0xed, 0xed,
    0x00, 0x00, 0x17, 0x17, 0x18, 0x19, 0x1a, 0x1a, 0x19, 0x18, 0x17, 0x18,
    0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x00, 0xed, 0x13, 0x13, 0x17, 0x17,
    0x17, 0x17, 0x19, 0x19, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17,
    0x1a, 0x17, 0x17, 0x17, 0x19, 0x19, 0x16, 0x16, 0x1a, 0x1a, 0x1a, 0x1a,
    0x17, 0x17, 0x00, 0x16, 0x07, 0x17, 0x1a, 0x18, 0x1a, 0x17, 0x1a, 0x08,
    0x08, 0x18, 0xec, 0xed, 0x00, 0x00, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16,
    0x16, 0x16, 0x16, 0x17, 0x17, 0x19, 0x19, 0x18, 0x14, 0x16, 0x00, 0xed,
    0x13, 0x13, 0x07, 0x16, 0x14, 0x16, 0x07, 0x14, 0x16, 0x16, 0x13, 0x16,
    0x16, 0x16, 0x13, 0x19, 0x16, 0x16, 0x14, 0x17, 0x17, 0x16, 0x18, 0x19,
    0x17, 0x17, 0x1a, 0x17, 0x1a, 0x17, 0x00, 0x16, 0x07, 0x18, 0x1a, 0x08,
    0x18, 0x1a, 0x1a, 0x08, 0x08, 0x18, 0xec, 0xed, 0x00, 0x00, 0x08, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x16, 0x16, 0x17, 0x16, 0x16,
    0x16, 0x13, 0x00, 0xed, 0x13, 0x13, 0x13, 0x13, 0x07, 0x14, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x14, 0x07, 0x13, 0x13, 0x13, 0x19, 0x16, 0x13, 0x13,
    0x17, 0x18, 0x07, 0x18, 0x19, 0x16, 0x1a, 0x17, 0x1a, 0x1a, 0x00, 0x16,
    0x07, 0x1a, 0x18, 0x1a, 0x17, 0x18, 0x18, 0x1a, 0x18, 0x1a, 0xec, 0xed,
    0x00, 0x00, 0xed, 0xed, 0xed, 0xed, 0xed, 0x08, 0x08, 0x19, 0x16, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0xed, 0xed, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0xed, 0x16, 0x07, 0x17, 0x1a, 0x1a, 0x08, 0x18, 0x1a, 0x17,
    0x1a, 0x1a, 0x08, 0xed, 0x00, 0x00, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0x16, 0x07, 0x1a, 0x1a, 0x17,
    0x18, 0x18, 0x17, 0x1a, 0x1a, 0x18, 0x1a, 0xed, 0x00, 0x00, 0xed, 0xed,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xe9, 0xe9, 0x00, 0xec,
    0xec, 0xec, 0xec, 0xec, 0xed, 0x00, 0x00, 0x00, 0x00, 0xed, 0xed, 0x16,
    0x07, 0x1a, 0x1a, 0x1a, 0x18, 0x1a, 0x17, 0x08, 0x17, 0x1a, 0x18, 0xed,
    0x00, 0x00, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x08, 0x1a, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0xec, 0xed, 0x00, 0xec, 0x1a, 0x18, 0xec, 0x18, 0x16, 0x16, 0x17, 0x16,
    0x00, 0xed, 0xed, 0x16, 0x07, 0x17, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x1a,
    0x1a, 0x17, 0x1a, 0xed, 0x00, 0x00, 0xed, 0x1a, 0x18, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x17, 0x1a, 0x17, 0x17, 0x1a, 0x1a, 0x08, 0x1a,
    0x1a, 0x1a, 0x08, 0x1a, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x1a, 0x17, 0x1a,
    0x1a, 0x1a, 0x1a, 0x18, 0x08, 0xed, 0x00, 0xec, 0x16, 0x16, 0x16, 0x16,
    0x16, 0x16, 0x16, 0x13, 0x00, 0xed, 0xed, 0x16, 0x07, 0x1a, 0x17, 0x1a,
    0x08, 0x1a, 0x17, 0x1a, 0x1a, 0x08, 0x17, 0xec, 0x00, 0x00, 0xed, 0x1a,
    0x13, 0x16, 0x16, 0x1a, 0x1a, 0x17, 0x1a, 0x17, 0x08, 0x1a, 0x1a, 0x18,
    0x08, 0x18, 0x1a, 0x18, 0x08, 0x17, 0x1a, 0x1a, 0x08, 0x1a, 0x1a, 0x1a,
    0x1a, 0x17, 0x1a, 0x08, 0x1a, 0x18, 0x08, 0x08, 0x08, 0xed, 0x00, 0xed,
    0x16, 0x13, 0x13, 0x13, 0x13, 0x17, 0x17, 0x13, 0x00, 0xed, 0xed, 0x16,
    0x07, 0x1a, 0x1a, 0x17, 0x1a, 0x18, 0x1a, 0x18, 0x18, 0x08, 0x1a, 0xec,
    0x00, 0x00, 0xed, 0x17, 0x13, 0x13, 0x1a, 0x1a, 0x17, 0x1a, 0x17, 0x1a,
    0x1a, 0x17, 0x1a, 0x08, 0x08, 0x18, 0x18, 0x1a, 0x17, 0x1a, 0x17, 0x18,
    0x1a, 0x17, 0x1a, 0x1a, 0x08, 0x1a, 0x1a, 0x1a, 0x17, 0x1a, 0x08, 0x08,
    0x08, 0xed, 0x00, 0xed, 0xed, 0xed, 0xed, 0x08, 0x17, 0x13, 0x13, 0x17,
    0xed, 0xed, 0xed, 0x16, 0x07, 0x17, 0x18, 0x1a, 0x1a, 0x1a, 0x08, 0x08,
    0x1a, 0x1a, 0x1a, 0xec, 0x00, 0x00, 0xed, 0x16, 0x13, 0x13, 0x17, 0x17,
    0x1a, 0x1a, 0x1a, 0x1a, 0x08, 0x1a, 0x1a, 0x17, 0x1a, 0x18, 0x1a, 0x17,
    0x18, 0x08, 0x1a, 0x1a, 0x17, 0x1a, 0x1a, 0x17, 0x1a, 0x08, 0x08, 0x1a,
    0x08, 0x18, 0x1a, 0x18, 0x08, 0xed, 0x00, 0xed, 0xed, 0xed, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0xed, 0x16, 0x07, 0x1a, 0x17, 0x18,
    0x1a, 0x1a, 0x08, 0x08, 0x17, 0x1a, 0x18, 0xec, 0x00, 0x00, 0xa0, 0x07,
    0x13, 0x07, 0x1a, 0x18, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x18, 0x17, 0x1a,
    0x1a, 0x18, 0x17, 0x17, 0x1a, 0x18, 0x1a, 0x18, 0x1a, 0x1a, 0x08, 0x1a,
    0x18, 0x18, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x17, 0x08, 0xed, 0x00, 0xed,
    0xed, 0x00, 0x00, 0xec, 0xec, 0xec, 0xec, 0xec, 0x00, 0xed, 0xed, 0x16,
    0x07, 0x1a, 0x17, 0x17, 0x18, 0x1a, 0x1a, 0x1a, 0x1a, 0x17, 0x1a, 0xec,
    0x00, 0x00, 0xec, 0x07, 0x13, 0x16, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x17, 0x1a, 0x17, 0x17, 0x18, 0x1a, 0x18, 0x17, 0x17, 0x17, 0x18, 0x08,
    0x18, 0x1a, 0x17, 0x17, 0x18, 0x1a, 0x17, 0x1a, 0x17, 0x17, 0x17, 0x1a,
    0x08, 0xed, 0x00, 0x16, 0x17, 0x16, 0x16, 0x18, 0xec, 0x18, 0x1a, 0xec,
    0x00, 0xed, 0xed, 0x16, 0x07, 0x17, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x17,
    0x1a, 0x1a, 0x17, 0xec, 0x00, 0x00, 0x08, 0x07, 0x13, 0x16, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x17, 0x07, 0x07, 0x17, 0x07, 0x07, 0x07, 0x16, 0x16,
    0x17, 0x18, 0x18, 0x1a, 0x1a, 0x17, 0x1a, 0x17, 0x1a, 0x1a, 0x1a, 0x17,
    0x1a, 0x17, 0x1a, 0x17, 0x08, 0xed, 0x00, 0x13, 0x16, 0x16, 0x16, 0x16,
    0x16, 0x16, 0x16, 0xec, 0xed, 0xed, 0xed, 0x16, 0x07, 0x1a, 0x18, 0x18,
    0x17, 0x1a, 0x17, 0x1a, 0x17, 0x17, 0x1a, 0xec, 0x00, 0x00, 0x08, 0x07,
    0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x12, 0x12, 0x13, 0x12,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x07, 0x16, 0x07, 0x07,
    0x07, 0x17, 0x07, 0x07, 0x16, 0x07, 0x07, 0x16, 0x08, 0xed, 0x00, 0x13,
    0x17, 0x17, 0x13, 0x13, 0x13, 0x13, 0x16, 0xed, 0xed, 0xed, 0xed, 0x16,
    0x13, 0x07, 0x1a, 0x17, 0x1a, 0x17, 0x17, 0x17, 0x1a, 0x17, 0x17, 0x08,
    0x00, 0x00, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13,
    0x18, 0xec, 0x00, 0x17, 0x13, 0x13, 0x17, 0x08, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0x17, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x17, 0x08, 0xed, 0xec, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1a, 0x1a, 0x18, 0x18,
    0x17, 0x16, 0x16, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x16, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0x17, 0x07, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x17, 0x08, 0xa0, 0xed, 0xed, 0xed,
    0xed, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9,
    0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xed, 0xed,
    0xed, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xe9, 0xe9, 0xa0,
    0xed, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x1f, 0x00,
    0xed, 0xed, 0xed, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x08,
    0xa0, 0x00, 0xa0, 0x18, 0x1a, 0x08, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x1f,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0x1d, 0xed, 0xed, 0x1d,
    0xec, 0x1c, 0xa0, 0x1f, 0x00, 0xed, 0xed, 0xa0, 0x1a, 0x08, 0xec, 0xed,
    0xed, 0xed, 0xec, 0xec, 0x08, 0x08, 0x1a, 0x1a, 0x1a, 0x17, 0x1a, 0x1a,
    0x18, 0x1a, 0x17, 0x18, 0x1a, 0x17, 0x18, 0x18, 0x17, 0x1a, 0x1a, 0x1a,
    0x17, 0x1a, 0x1a, 0x17, 0xa0, 0x00, 0xa0, 0xed, 0xed, 0x00, 0x00, 0x00,
    0x00, 0xec, 0x1a, 0x19, 0x1a, 0x1a, 0x18, 0x17, 0x1a, 0xec, 0xec, 0x1c,
    0x08, 0x1a, 0x1a, 0x19, 0x17, 0x18, 0x08, 0xa0, 0x1f, 0x00, 0xed, 0x08,
    0x07, 0x1a, 0x17, 0x18, 0x1a, 0x18, 0x1a, 0x1a, 0x17, 0x18, 0x17, 0x1a,
    0x17, 0x1a, 0x1a, 0x17, 0x1a, 0x18, 0x1a, 0x1a, 0x1a, 0x1a, 0x17, 0x1a,
    0x17, 0x1a, 0x1a, 0x1a, 0x1a, 0x18, 0x1a, 0x17, 0xa0, 0x00, 0x1f, 0xed,
    0x00, 0x00, 0x1d, 0xec, 0xec, 0x1a, 0x17, 0x18, 0x1a, 0x1a, 0x1a, 0x08,
    0x08, 0x1a, 0x19, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1a, 0x18, 0x16, 0x1a,
    0xa0, 0x00, 0xed, 0x08, 0x07, 0x17, 0x18, 0x1a, 0x17, 0x1a, 0x17, 0x1a,
    0x08, 0x18, 0x1a, 0x18, 0x1a, 0x17, 0x17, 0x1a, 0x17, 0x18, 0x17, 0x1a,
    0x18, 0x17, 0x17, 0x18, 0x1a, 0x1a, 0x18, 0x1a, 0x17, 0x1a, 0x1a, 0x18,
    0xa0, 0x00, 0x1f, 0x00, 0x1d, 0xec, 0x08, 0x1a, 0x1a, 0x1a, 0x19, 0x17,
    0x18, 0x18, 0x1a, 0x08, 0x1a, 0x17, 0x1a, 0x08, 0x08, 0x1a, 0x19, 0x19,
    0x1a, 0x1a, 0x08, 0x19, 0xec, 0x00, 0xed, 0x1a, 0x07, 0x17, 0x1a, 0x18,
    0x1a, 0x18, 0x1a, 0x18, 0x08, 0x18, 0x1a, 0x1a, 0x1a, 0x1a, 0x18, 0x1a,
    0x18, 0x17, 0x17, 0x17, 0x17, 0x18, 0x1a, 0x1a, 0x17, 0x1a, 0x17, 0x1a,
    0x1a, 0x18, 0x1a, 0x1a, 0xa0, 0x00, 0x1d, 0x1d, 0x08, 0x1a, 0x19, 0x19,
    0x08, 0x1a, 0x17, 0x18, 0x1a, 0x1a, 0x19, 0x19, 0x1a, 0x19, 0x19, 0x08,
    0x08, 0x1a, 0x1a, 0x1a, 0x17, 0x1a, 0x08, 0x1a, 0x08, 0x00, 0xed, 0x1a,
    0x07, 0x1a, 0x17, 0x18, 0x17, 0x18, 0x17, 0x1a, 0x18, 0x18, 0x18, 0x18,
    0x17, 0x1a, 0x1a, 0x1a, 0x1a, 0x17, 0x18, 0x1a, 0x18, 0x1a, 0x17, 0x17,
    0x1a, 0x18, 0x17, 0x1a, 0x17, 0x17, 0x1a, 0x17, 0xa0, 0x00, 0xec, 0x1a,
    0x14, 0x16, 0x19, 0x17, 0x18, 0x18, 0x18, 0x1a, 0x18, 0x19, 0x17, 0x19,
    0x1a, 0x18, 0x19, 0x19, 0x19, 0x19, 0x18, 0x17, 0x19, 0x18, 0x19, 0x17,
    0x1a, 0x00, 0xed, 0x18, 0x13, 0x17, 0x1a, 0x18, 0x1a, 0x18, 0x1a, 0x18,
    0x08, 0x18, 0x1a, 0x1a, 0x1a, 0x17, 0x17, 0x17, 0x18, 0x1a, 0x07, 0x07,
    0x17, 0x07, 0x17, 0x07, 0x16, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x1a,
    0xa0, 0x00, 0xec, 0x18, 0x14, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 0x18,
    0x1a, 0x1a, 0x19, 0x19, 0x1a, 0x19, 0x19, 0x08, 0x08, 0x1a, 0x1a, 0x17,
    0x18, 0x1a, 0x18, 0x19, 0x18, 0x00, 0xed, 0x18, 0x13, 0x16, 0x17, 0x18,
    0x17, 0x18, 0x17, 0x1a, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x07, 0x07,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x07, 0x17, 0xec, 0x00, 0xec, 0x18, 0x13, 0x13, 0x18, 0x1a,
    0x19, 0x19, 0x1a, 0x08, 0x08, 0x08, 0x1a, 0x17, 0x17, 0x18, 0x19, 0x19,
    0x19, 0x19, 0x18, 0x17, 0x19, 0x18, 0x19, 0x18, 0x18, 0x00, 0xed, 0x18,
    0x13, 0x13, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x07, 0x17, 0xa0, 0x1d, 0x17,
    0x13, 0x13, 0x16, 0x19, 0x17, 0x17, 0x19, 0x19, 0x1a, 0x1a, 0x18, 0x16,
    0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x18, 0x1a, 0x18, 0x19,
    0x18, 0x00, 0xed, 0x08, 0x07, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x07, 0x07, 0x17, 0x1a, 0x08,
    0xed, 0xed, 0xed, 0xed, 0xa0, 0xa0, 0xa0, 0xe9, 0xe9, 0x00, 0xed, 0xed,
    0xed, 0xed, 0x1d, 0x1a, 0x14, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13,
    0x14, 0x13, 0x13, 0x13, 0x13, 0x00, 0xed, 0xed, 0x08, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1a, 0x08, 0x08, 0xed,
    0xa0, 0xe9, 0xe9, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0x1c, 0x17, 0x13, 0x12, 0x07,
    0x16, 0x16, 0x17, 0x18, 0x19, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
    0xed, 0xed
  };
  unsigned int wall_bmp_len = 5174;
#pragma endregion  
#include <SDL2/SDL.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <random>
#include <fstream>
#include <sstream>
#include <unordered_map>
#include <utility>

// Maze dimensions (must be odd numbers)
const int MAZE_WIDTH = 21;
const int MAZE_HEIGHT = 21;

// Texture dimensions
const int TEX_WIDTH = 64;
const int TEX_HEIGHT = 64;

// Default screen dimensions (can be overridden by command-line)
int defaultScreenWidth = 640;
int defaultScreenHeight = 480;

// Performance monitoring
bool showFPS = true;
Uint32 frameStart = 0;
int frameCount = 0;
float fps = 0.0f;
Uint32 lastFPSUpdate = 0;

// Chunk size for dynamic loading/unloading
const int CHUNK_SIZE = 7;  // Each chunk is CHUNK_SIZE x CHUNK_SIZE cells

// Global temporary map file name (generated once)
std::string globalTempMapFilename;

// ----------------------
// CHUNK MANAGEMENT SYSTEM
// ----------------------
struct Chunk {
    int cx, cy; // chunk coordinates (in chunk units)
    bool loaded; // whether cells are in memory
    bool saved;  // whether this chunk has been saved to the temp file
    std::vector<std::vector<int>> cells; // the chunk's cells (0 = empty, 1 = wall)
};

struct PairHash {
    std::size_t operator()(const std::pair<int,int>& p) const {
         return std::hash<int>()(p.first) ^ (std::hash<int>()(p.second) << 1);
    }
};

std::unordered_map<std::pair<int,int>, Chunk, PairHash> chunkManager;

std::string randomString(int length) {
    static const std::string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    std::string str;
    for (int i = 0; i < length; i++) {
        str.push_back(chars[rand() % chars.size()]);
    }
    return str;
}

void saveChunk(Chunk &chunk) {
    if (!chunk.loaded || chunk.saved) return;
    std::ofstream ofs(globalTempMapFilename, std::ios::app);
    if (ofs.is_open()) {
         int rows = chunk.cells.size();
         int cols = rows > 0 ? chunk.cells[0].size() : 0;
         ofs << chunk.cx << " " << chunk.cy << " " << rows << " " << cols << "\n";
         for (int i = 0; i < rows; i++){
             for (int j = 0; j < cols; j++){
                 ofs << chunk.cells[i][j] << " ";
             }
             ofs << "\n";
         }
         ofs.close();
         chunk.cells.clear();
         chunk.loaded = false;
         chunk.saved = true;
         std::cout << "Chunk (" << chunk.cx << ", " << chunk.cy << ") saved to " << globalTempMapFilename << "\n";
    } else {
         std::cerr << "Failed to save chunk (" << chunk.cx << ", " << chunk.cy << ")\n";
    }
}

void loadChunk(Chunk &chunk) {
    if (chunk.loaded || !chunk.saved) return;
    std::ifstream ifs(globalTempMapFilename);
    if (ifs.is_open()) {
         std::string line;
         bool found = false;
         while (std::getline(ifs, line)) {
             std::istringstream iss(line);
             int cx, cy, rows, cols;
             if (!(iss >> cx >> cy >> rows >> cols)) continue;
             if (cx == chunk.cx && cy == chunk.cy) {
                 chunk.cells.resize(rows, std::vector<int>(cols, 0));
                 for (int i = 0; i < rows; i++){
                     std::getline(ifs, line);
                     std::istringstream issRow(line);
                     for (int j = 0; j < cols; j++){
                         issRow >> chunk.cells[i][j];
                     }
                 }
                 found = true;
                 break;
             } else {
                 for (int i = 0; i < rows; i++) {
                     std::getline(ifs, line);
                 }
             }
         }
         ifs.close();
         if (found) {
             chunk.loaded = true;
             std::cout << "Chunk (" << chunk.cx << ", " << chunk.cy << ") loaded from " << globalTempMapFilename << "\n";
         } else {
             std::cerr << "Chunk (" << chunk.cx << ", " << chunk.cy << ") not found in " << globalTempMapFilename << "\n";
         }
    } else {
         std::cerr << "Failed to open temp map file: " << globalTempMapFilename << "\n";
    }
}

bool isChunkInView(const Chunk &chunk, double posX, double posY) {
    double centerX = chunk.cx * CHUNK_SIZE + CHUNK_SIZE / 2.0;
    double centerY = chunk.cy * CHUNK_SIZE + CHUNK_SIZE / 2.0;
    double dx = centerX - posX;
    double dy = centerY - posY;
    return (std::sqrt(dx*dx + dy*dy) < 10.0);
}

inline int getCell(int x, int y) {
    int cx = x / CHUNK_SIZE;
    int cy = y / CHUNK_SIZE;
    std::pair<int,int> key = {cx, cy};
    auto it = chunkManager.find(key);
    if (it != chunkManager.end()){
         Chunk &chunk = it->second;
         if (!chunk.loaded && chunk.saved)
             loadChunk(chunk);
         int localX = x - cx * CHUNK_SIZE;
         int localY = y - cy * CHUNK_SIZE;
         if (localY < chunk.cells.size() && localX < (chunk.cells.empty() ? 0 : chunk.cells[0].size()))
             return chunk.cells[localY][localX];
         else
             return 1;
    }
    return 1;
}

// ----------------------
// MAZE GENERATION
// ----------------------
void generateMaze(std::vector<std::vector<int>> &maze, int x, int y) {
    int directions[4][2] = { {0, -2}, {0, 2}, {2, 0}, {-2, 0} };
    std::vector<int> order = {0, 1, 2, 3};
    std::shuffle(order.begin(), order.end(), std::default_random_engine(std::random_device{}()));
    for (int i = 0; i < 4; i++) {
         int dir = order[i];
         int nx = x + directions[dir][0];
         int ny = y + directions[dir][1];
         if (nx > 0 && nx < MAZE_WIDTH - 1 && ny > 0 && ny < MAZE_HEIGHT - 1) {
             if (maze[ny][nx] == 1) {
                 maze[y + directions[dir][1] / 2][x + directions[dir][0] / 2] = 0;
                 maze[ny][nx] = 0;
                 generateMaze(maze, nx, ny);
             }
         }
    }
}

// ----------------------
// COLLISION DETECTION
// ----------------------
void resolveCollision(double &newX, double &newY, double hitbox) {
    int minX = std::max(0, int(std::floor(newX - hitbox)));
    int maxX = std::min(MAZE_WIDTH - 1, int(std::ceil(newX + hitbox)));
    int minY = std::max(0, int(std::floor(newY - hitbox)));
    int maxY = std::min(MAZE_HEIGHT - 1, int(std::ceil(newY + hitbox)));
    for (int i = minY; i <= maxY; i++) {
         for (int j = minX; j <= maxX; j++) {
             if (getCell(j, i) != 0) {
                 double left = j, right = j + 1;
                 double top = i, bottom = i + 1;
                 double closestX = std::max(left, std::min(newX, right));
                 double closestY = std::max(top, std::min(newY, bottom));
                 double dx = newX - closestX;
                 double dy = newY - closestY;
                 double dist = std::sqrt(dx*dx + dy*dy);
                 if (dist < hitbox) {
                     double penetration = hitbox - dist;
                     if (dist == 0)
                         newX += penetration;
                     else {
                         newX += (dx / dist) * penetration;
                         newY += (dy / dist) * penetration;
                     }
                 }
             }
         }
    }
}

// ----------------------
// MAIN
// ----------------------
int main(int argc, char* argv[]) {
    int screenWidth = defaultScreenWidth;
    int screenHeight = defaultScreenHeight;
    if (argc >= 3) {
         screenWidth = std::atoi(argv[1]);
         screenHeight = std::atoi(argv[2]);
         if (screenWidth <= 0 || screenHeight <= 0) {
             std::cerr << "Invalid screen dimensions provided. Using defaults.\n";
             screenWidth = defaultScreenWidth;
             screenHeight = defaultScreenHeight;
         }
    }
    
    std::srand(static_cast<unsigned int>(std::time(nullptr)));
    globalTempMapFilename = "map-" + randomString(8) + ".map";
    std::cout << "Temporary map file: " << globalTempMapFilename << "\n";
    
    // Generate full maze.
    std::vector<std::vector<int>> fullMaze(MAZE_HEIGHT, std::vector<int>(MAZE_WIDTH, 1));
    fullMaze[1][1] = 0;
    generateMaze(fullMaze, 1, 1);
    
    // Split maze into chunks.
    int numChunksX = (MAZE_WIDTH + CHUNK_SIZE - 1) / CHUNK_SIZE;
    int numChunksY = (MAZE_HEIGHT + CHUNK_SIZE - 1) / CHUNK_SIZE;
    for (int cy = 0; cy < numChunksY; cy++) {
         for (int cx = 0; cx < numChunksX; cx++) {
             Chunk chunk;
             chunk.cx = cx; chunk.cy = cy;
             int startX = cx * CHUNK_SIZE, startY = cy * CHUNK_SIZE;
             int endX = std::min(startX + CHUNK_SIZE, MAZE_WIDTH);
             int endY = std::min(startY + CHUNK_SIZE, MAZE_HEIGHT);
             chunk.cells.resize(endY - startY, std::vector<int>(endX - startX, 0));
             for (int y = startY; y < endY; y++){
                  for (int x = startX; x < endX; x++){
                      chunk.cells[y - startY][x - startX] = fullMaze[y][x];
                  }
             }
             chunk.loaded = true;
             chunk.saved = false;
             chunkManager[{cx, cy}] = chunk;
         }
    }
    
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
         std::cerr << "SDL2 Initialization failed: " << SDL_GetError() << "\n";
         return 1;
    }
    
    SDL_Window *window = SDL_CreateWindow("Procedural Raycast Maze",
                      SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
                      screenWidth, screenHeight,
                      SDL_WINDOW_SHOWN);
    if (!window) {
         std::cerr << "Window creation failed: " << SDL_GetError() << "\n";
         SDL_Quit();
         return 1;
    }
    
    // Use a surface-based approach (Wolf4SDL style)
    SDL_Surface *screen = SDL_GetWindowSurface(window);
    if (!screen) {
         std::cerr << "Failed to get window surface: " << SDL_GetError() << "\n";
         SDL_DestroyWindow(window);
         SDL_Quit();
         return 1;
    }
    
    // Load wall texture (wall.bmp must be a 64x64 BMP).
    SDL_RWops* rw = SDL_RWFromConstMem(wall_bmp, wall_bmp_len);
    SDL_Surface* tempSurface = SDL_LoadBMP_RW(rw, 1); // The 1 tells SDL to free the RWops automatically
    if (!tempSurface) {
         std::cerr << "Failed to load wall.bmp: " << SDL_GetError() << "\n";
         return 1;
    }
    SDL_Surface *wallTexture = SDL_ConvertSurface(tempSurface, screen->format, 0);
    SDL_FreeSurface(tempSurface);
    if (!wallTexture) {
         std::cerr << "Failed to convert wall texture: " << SDL_GetError() << "\n";
         SDL_DestroyWindow(window);
         SDL_Quit();
         return 1;
    }
    
    // Precompute texture columns for fast access.
    std::vector<std::vector<Uint32>> wallTextureColumns(TEX_WIDTH, std::vector<Uint32>(TEX_HEIGHT));
    if (SDL_LockSurface(wallTexture) != 0) {
         std::cerr << "Failed to lock wall texture: " << SDL_GetError() << "\n";
         SDL_FreeSurface(wallTexture);
         SDL_DestroyWindow(window);
         SDL_Quit();
         return 1;
    }
    Uint32 *texPixels = static_cast<Uint32*>(wallTexture->pixels);
    int texPitch = wallTexture->pitch / sizeof(Uint32);
    for (int x = 0; x < TEX_WIDTH; x++) {
         for (int y = 0; y < TEX_HEIGHT; y++) {
             wallTextureColumns[x][y] = texPixels[y * texPitch + x];
         }
    }
    SDL_UnlockSurface(wallTexture);
    
    SDL_SetRelativeMouseMode(SDL_TRUE);
    
    // Player state.
    double posX = 1.5, posY = 1.5;
    double dirX = 1.0, dirY = 0.0;
    double planeX = 0.0, planeY = 0.66;
    const double hitbox = 0.2;
    
    bool quit = false;
    SDL_Event event;
    Uint32 oldTime = SDL_GetTicks();
    const double mouseSensitivity = 0.003;
    lastFPSUpdate = oldTime;
    
    // Preallocate zbuffer.
    std::vector<double> zBuffer(screenWidth);
    
    while (!quit) {
         frameStart = SDL_GetTicks();
         while (SDL_PollEvent(&event)) {
              if (event.type == SDL_QUIT)
                  quit = true;
              if (event.type == SDL_KEYDOWN) {
                  if (event.key.keysym.sym == SDLK_ESCAPE)
                      quit = true;
                  if (event.key.keysym.sym == SDLK_f)
                      showFPS = !showFPS;
              }
              if (event.type == SDL_MOUSEMOTION) {
                  double rot = event.motion.xrel * mouseSensitivity;
                  double oldDir = dirX;
                  dirX = dirX * cos(rot) - dirY * sin(rot);
                  dirY = oldDir * sin(rot) + dirY * cos(rot);
                  double oldPlane = planeX;
                  planeX = planeX * cos(rot) - planeY * sin(rot);
                  planeY = oldPlane * sin(rot) + planeY * cos(rot);
              }
         }
         
         // Update chunk manager.
         for (auto &entry : chunkManager) {
              Chunk &chunk = entry.second;
              if (isChunkInView(chunk, posX, posY)) {
                  if (!chunk.loaded && chunk.saved)
                      loadChunk(chunk);
              } else {
                  if (chunk.loaded)
                      saveChunk(chunk);
              }
         }
         
         Uint32 currentTime = SDL_GetTicks();
         double frameTime = (currentTime - oldTime) / 1000.0;
         oldTime = currentTime;
         double moveSpeed = frameTime * 3.0;
         
         double dx = 0, dy = 0;
         const Uint8* keystate = SDL_GetKeyboardState(NULL);
         if (keystate[SDL_SCANCODE_W]) { dx += dirX * moveSpeed; dy += dirY * moveSpeed; }
         if (keystate[SDL_SCANCODE_S]) { dx -= dirX * moveSpeed; dy -= dirY * moveSpeed; }
         if (keystate[SDL_SCANCODE_A]) { dx += dirY * moveSpeed; dy -= dirX * moveSpeed; }
         if (keystate[SDL_SCANCODE_D]) { dx -= dirY * moveSpeed; dy += dirX * moveSpeed; }
         double newPosX = posX + dx, newPosY = posY + dy;
         resolveCollision(newPosX, newPosY, hitbox);
         posX = newPosX; posY = newPosY;
         
         // Lock the screen surface.
         if (SDL_LockSurface(screen) != 0) {
              std::cerr << "Failed to lock screen surface: " << SDL_GetError() << "\n";
              break;
         }
         Uint32 *screenPixels = static_cast<Uint32*>(screen->pixels);
         int screenPitch = screen->pitch / sizeof(Uint32);
         
         // Fast fill for ceiling and floor.
         Uint32 ceilingColor = SDL_MapRGB(screen->format, 70, 70, 70);
         Uint32 floorColor = SDL_MapRGB(screen->format, 40, 40, 40);
         for (int y = 0; y < screenHeight; y++) {
             Uint32 fillColor = (y < screenHeight / 2) ? ceilingColor : floorColor;
             for (int x = 0; x < screenWidth; x++) {
                  screenPixels[y * screenPitch + x] = fillColor;
             }
         }
         
         // Raycasting loop.
         for (int x = 0; x < screenWidth; x++) {
              double cameraX = 2.0 * x / double(screenWidth) - 1.0;
              double rayDirX = dirX + planeX * cameraX;
              double rayDirY = dirY + planeY * cameraX;
              int mapX = static_cast<int>(posX), mapY = static_cast<int>(posY);
              double deltaDistX = (rayDirX == 0) ? 1e30 : std::abs(1.0 / rayDirX);
              double deltaDistY = (rayDirY == 0) ? 1e30 : std::abs(1.0 / rayDirY);
              int stepX, stepY;
              double sideDistX, sideDistY;
              
              if (rayDirX < 0) {
                  stepX = -1;
                  sideDistX = (posX - mapX) * deltaDistX;
              } else {
                  stepX = 1;
                  sideDistX = (mapX + 1.0 - posX) * deltaDistX;
              }
              if (rayDirY < 0) {
                  stepY = -1;
                  sideDistY = (posY - mapY) * deltaDistY;
              } else {
                  stepY = 1;
                  sideDistY = (mapY + 1.0 - posY) * deltaDistY;
              }
              
              int hit = 0, side;
              while (!hit) {
                  if (sideDistX < sideDistY) {
                      sideDistX += deltaDistX;
                      mapX += stepX;
                      side = 0;
                  } else {
                      sideDistY += deltaDistY;
                      mapY += stepY;
                      side = 1;
                  }
                  if (getCell(mapX, mapY) > 0)
                      hit = 1;
              }
              
              double perpWallDist = (side == 0) ? (mapX - posX + (1 - stepX) / 2.0) / rayDirX
                                               : (mapY - posY + (1 - stepY) / 2.0) / rayDirY;
              zBuffer[x] = perpWallDist;
              int lineHeight = static_cast<int>(screenHeight / perpWallDist);
              int drawStart = -lineHeight / 2 + screenHeight / 2;
              if (drawStart < 0) drawStart = 0;
              int drawEnd = lineHeight / 2 + screenHeight / 2;
              if (drawEnd >= screenHeight) drawEnd = screenHeight - 1;
              
              double wallX = (side == 0) ? posY + perpWallDist * rayDirY : posX + perpWallDist * rayDirX;
              wallX -= std::floor(wallX);
              int texX = static_cast<int>(wallX * TEX_WIDTH);
              if ((side == 0 && rayDirX > 0) || (side == 1 && rayDirY < 0))
                  texX = TEX_WIDTH - texX - 1;
              
              int texStep = (TEX_HEIGHT << 16) / lineHeight;
              int texPos = (drawStart - screenHeight / 2 + lineHeight / 2) * texStep;
              
              for (int y = drawStart; y < drawEnd; y++) {
                  int texY = (texPos >> 16) & (TEX_HEIGHT - 1);
                  texPos += texStep;
                  Uint32 color = wallTextureColumns[texX][texY];
                  // Simple shading: if side==1, halve each RGB component (assumes 32-bit ARGB)
                  if (side == 1) {
                      Uint8 a = (color >> 24) & 0xFF;
                      Uint8 r = ((color >> 16) & 0xFF) >> 1;
                      Uint8 g = ((color >> 8) & 0xFF) >> 1;
                      Uint8 b = (color & 0xFF) >> 1;
                      color = (a << 24) | (r << 16) | (g << 8) | b;
                  }
                  screenPixels[y * screenPitch + x] = color;
              }
         }
         
         SDL_UnlockSurface(screen);
         SDL_UpdateWindowSurface(window);
         
         if (showFPS) {
              frameCount++;
              if (currentTime - lastFPSUpdate >= 1000) {
                  fps = frameCount * 1000.0f / (currentTime - lastFPSUpdate);
                  frameCount = 0;
                  lastFPSUpdate = currentTime;
                  std::cout << "FPS: " << fps << std::endl;
              }
         }
    }
    
    SDL_FreeSurface(wallTexture);
    SDL_DestroyWindow(window);
    SDL_Quit();
    return 0;
}
